<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.fit_nance.project.dao.IMemberDAO">
	<resultMap id="memResult" type="com.fit_nance.project.model.MemberVO" >
		<result property="memRole" column="memRole"/>
		<result property="memId" column="memId"/>
		<result property="memPwd" column="memPwd"/>
		<result property="memName" column="memName"/>
		<result property="memBirth" column="memBirth"/>
		<result property="memGender" column="memGender"/>
		<result property="memBank" column="memBank"/>
		<result property="memEmailRecd" column="memEmailRecd"/>
		<result property="provider" column="provider"/>
		<result property="providerId" column="providerId"/>
		<result property="certified" column="certified"/>
	</resultMap>
	
	<!-- 회원정보 조회 -->
	<select id="myInfo" parameterType="string" resultType="com.fit_nance.project.model.MemberVO">
	  	SELECT * 
	  	FROM member 
	  	ORDER BY memId
  </select>
  
	<!-- 기존 사용자 검색 -->
	<select id="findByUserId" parameterType="string" resultType="com.fit_nance.project.model.MemberVO">
		SELECT *
		FROM member
		WHERE memId = #{memId}
	</select>
	
	<select id="findByUserId_OAuth" parameterType="string" resultType="com.fit_nance.project.model.MemberVO">
		SELECT *
		FROM member
		WHERE memId = #{memId}
	</select>
	
	<!-- 회원가입 -->
	<insert id="insertMember" parameterType="com.fit_nance.project.model.MemberVO">
		INSERT member(memRole, memId, memPwd, memName, memBirth, memGender, memBank, memEmailRecd, certified)
		VALUES (#{memRole}, #{memId}, #{memPwd}, #{memName}, #{memBirth}, #{memGender}, #{memBank}, #{memEmailRecd}, #{certified})
	</insert>
	
	<!-- 회원가입 아이디 체크 -->
	<select id="id_check" parameterType="string" resultType="int">
	  	SELECT COUNT(memId) 
	  	FROM member 
	  	WHERE memId = #{memId}
	  	ORDER BY memId
 	 </select>
	
	<!-- OAUTH회원가입 -->
	<insert id="insertOAuthMember" parameterType="com.fit_nance.project.model.MemberVO">
		INSERT member(memRole, memId, memPwd, memName,memBirth,memGender, memBank, memEmailRecd, provider, providerId)
		VALUES ( #{memRole}, #{memId}, #{memPwd}, #{memName}, #{memBirth}, #{memGender}, #{memBank}, #{memEmailRecd}, #{provider}, #{providerId})
	</insert>
	
	<!-- 개인정보 수정 -->
	<update id="updateMemInfo" parameterType="hashmap">
		UPDATE member M, bank B
		SET M.memName=#{memName}, M.memBank=#{memBank}, M.memBirth = #{memBirth},  M.memEmailRecd=#{memEmailRecd},  M.memImg=#{memImg}
		WHERE M.memId=#{memId}
	</update>
	
	<!-- 비밀번호 변경 -->
	<update id="updateMemPwd" parameterType="hashmap">
		UPDATE member
		SET memPwd=#{memPwd}
		WHERE memId=#{memId}
	</update>
	
	<!-- 개인정보 프로필 이미지 수정 -->
	<update id="updateMemImg" parameterType="hashmap">
		UPDATE member
		SET memImg=#{memImg}
		WHERE memId=#{memId}
	</update>
	
	<!-- 상세 보기 -->
	<select id="detailViewMemInfo" parameterType="hashmap" resultType="com.fit_nance.project.model.MemberVO">
		SELECT * 
		FROM member M
		INNER JOIN bank B
		ON M.memBank = B.memBank
		WHERE memId=#{memId} AND memPwd=#{memPwd}
	</select>
	
	<!-- 즐겨찾기 목록 보기 -->
	<!-- 카운트 -->
	<select id="favoriteListCount" parameterType="string" resultType="int">
		SELECT COUNT(*) 
		FROM favorite F
        WHERE memId=#{memId}
	</select>
	
	<!-- 적금 -->
	<select id="favoriteInstallListView" parameterType="string" resultType="com.fit_nance.project.model.FavoriteVO">
		SELECT * 
		FROM favorite F
		INNER JOIN installment_option IO ON F.oIndex = IO.oIndex and F.kind = IO.kind
        INNER JOIN installment_base I ON IO.pIndex = I.pIndex
        WHERE memId=#{memId}
	</select>
	
	<!-- 적금 -->
	<select id="favoriteDepositListView" parameterType="string" resultType="com.fit_nance.project.model.FavoriteVO">
		SELECT * 
		FROM favorite F
		INNER JOIN deposit_option DO ON F.oIndex = DO.oIndex and F.kind = DO.kind
        INNER JOIN deposit_base D ON DO.pIndex = D.pIndex
        WHERE memId=#{memId}
	</select>
	
	<!-- 적금 -->
	<select id="favoritePensionListView" parameterType="string" resultType="com.fit_nance.project.model.FavoriteVO">
		SELECT * 
		FROM favorite F
		INNER JOIN pension_option PO ON F.oIndex = PO.oIndex and F.kind = PO.kind
        INNER JOIN pension_base P ON PO.pIndex = P.pIndex
        WHERE memId=#{memId}
	</select>
	
	<!-- 적금 -->
	<select id="favoriteMortgageListView" parameterType="string" resultType="com.fit_nance.project.model.FavoriteVO">
		SELECT * 
		FROM favorite F
		INNER JOIN home_loan_option HO ON F.oIndex = HO.oIndex and F.kind = HO.kind
        INNER JOIN home_loan_base H ON HO.pIndex = H.pIndex
        WHERE memId=#{memId}
	</select>
	
	<!-- 적금 -->
	<select id="favoriteCharterListView" parameterType="string" resultType="com.fit_nance.project.model.FavoriteVO">
		SELECT * 
		FROM favorite F
		INNER JOIN charter_loan_option CO ON F.oIndex = CO.oIndex and F.kind = CO.kind
        INNER JOIN charter_loan_base C ON CO.pIndex = C.pIndex
        WHERE memId=#{memId}
	</select>
	
	<!-- 적금 -->
	<select id="favoriteListCreditView" parameterType="string" resultType="com.fit_nance.project.model.FavoriteVO">
		SELECT * 
		FROM favorite F
		INNER JOIN personal_loan_option PO ON F.oIndex = PO.oIndex and F.kind = PO.kind
        INNER JOIN personal_loan_base P ON PO.pIndex = P.pIndex
        WHERE memId=#{memId}
	</select>
	
	<select id="passwordCheck" parameterType="string" resultType="com.fit_nance.project.model.MemberVO">
		SELECT * 
		FROM member 
		WHERE memId=#{memId}
  	</select>
  	<delete id="withdrawal_member" parameterType="com.fit_nance.project.model.MemberVO">
		DELETE FROM member WHERE memId=#{memId}
	</delete>
	
	<insert id="insertdummy" parameterType="com.fit_nance.project.model.DummyVO">
		INSERT INTO test(user_id, ages, gender, item_id)
		VALUES (#{user_id}, #{ages}, #{gender}, #{item_id})
	</insert>
	<insert id="insertdummy2" parameterType="com.fit_nance.project.model.DummyVO">
		INSERT INTO test2 (user_id, item_id, timestamp, rating )
		VALUES (#{user_id}, #{item_id},#{timestamp}, #{rating} )
	</insert>
</mapper>